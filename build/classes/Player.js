const HEADER_LENGTH=14,DEFAULT_TEMPO=5e5,EVENT_SIZE=8,EVENT_CODE={NOTE_ON:9,NOTE_OFF:8,CONTROL_CHANGE:11,SET_TEMPO:81,END_OF_TRACK:47};class Player extends EventEmitter{#t;#e;#s;#i=[];#r=[];#a=!1;#n=0;#o=5e5;#h=[];#c=null;#l=0;#p=0;#u=5;#k=!1;#d=0;#m=0;#f=0;#T=0;#E=[];#g=0;#y=1;parseThreads;constructor(){super(),this.parseThreads=8}#v(t,e){return new Promise((s,i)=>{const r=performance.now();try{this.unload(),this.#k=!0;const a=new DataView(t),n=a.getUint32(0);if(1297377380!==n)throw new Error(`Invalid MIDI magic! Expected 4d546864, got ${n.toString(16).padStart(8,"0")}.`);const o=a.getUint32(4);if(6!==o)throw new Error(`Invalid header length! Expected 6, got ${o}.`);if(this.#t=a.getUint16(8),this.#e=a.getUint16(10),this.#E.length=this.#e,0===this.#t&&this.#e>1)throw new Error(`Invalid track count! Format 0 MIDIs should only have 1 track, got ${this.#e}.`);if(this.#t>=2)throw new Error(`Unsupported MIDI format: ${this.#t}.`);if(this.#s=a.getUint16(12),0===this.#s)throw new Error("Invalid PPQN/division value!");if(32768&this.#s)throw new Error("SMPTE timecode format is not supported!");this.#i=new Array(this.#e);let h=14;for(let t=0;t<this.#e;++t){if(h>=a.byteLength)throw new Error(`Reached EOF while looking for track ${t}. Tracks reported in header: ${this.#e}.`);const e=a.getUint32(h);if(1297379947!==e)throw new Error(`Invalid track ${t} magic! Expected 4d54726b, got ${e.toString(16).padStart(8,"0")}.`);const s=a.getUint32(h+4);this.#i[t]=h,h+=s+8}this.#g=h,this.#f=0,this.#d=0;const c=this.#i.map((t,e)=>({index:e,length:a.getUint32(t+4)}));c.sort((t,e)=>e.length-t.length);const l=Math.min(this.parseThreads,this.#e);let p=0;const u=Array.from({length:l},()=>[]),k=new Array(l).fill(0);for(const t of c){let e=1/0,s=-1;for(let t=0;t<l;++t)k[t]<e&&(e=k[t],s=t);u[s].push(t.index),k[s]+=t.length}for(let a=0;a<l;++a){const n=u[a];if(0===n.length)continue;const o=new Worker("./threads/midiPlayerThread.js");o.postMessage({buffer:t,trackIndices:n,trackOffsets:this.#i});const h=()=>{o.active&&o.terminate()};this.on("terminateWorkers",h),o.addEventListener("message",a=>{switch(a.data.m){case"online":o.active=!0;break;case"data":this.#E[a.data.trackIndex]={packedBuffer:a.data.packedBuffer,eventCount:a.data.packedBuffer?a.data.packedBuffer.byteLength/8:0,view:a.data.packedBuffer?new DataView(a.data.packedBuffer):null},this.#f=Math.max(this.#f,a.data.totalTicks),this.#r.push(a.data.tempoEvents),++this.#d;break;case"error":this.unload(),i(a.data.error);break;case"exit":let n=a.data.code;if(this.off("terminateWorkers",h),o.active=!1,!this.#k)return;if(0!==n)return this.unload(),void i(new Error(`Worker stopped with exit code ${n}.`));++p,p===l&&(this.#k=!1,this.#r=this.#r.flat(),this.#w(),this.#m=this.#E.map(t=>t?.eventCount||0).reduce((t,e)=>t+e,0),this.emit("fileLoaded"),t=null,s([e,performance.now()-r]))}}),o.addEventListener("error",t=>{this.unload(),i(t)})}}catch(t){this.unload(),i(t)}})}async loadFile(t){const e=performance.now();this.#k=!0;const s=await fs.promises.open(t),i=await s.stat(),r=new SharedArrayBuffer(i.size),a=Buffer.from(r);let n=0;for await(const t of s.createReadStream())a.set(t,n),n+=t.byteLength;return await s.close(),this.#v(r,performance.now()-e)}async loadArrayBuffer(t){const e=performance.now();let s;return this.#k=!0,t instanceof SharedArrayBuffer?s=t:(s=new SharedArrayBuffer(t.byteLength),new Uint8Array(s).set(new Uint8Array(t))),this.#v(s,performance.now()-e)}unload(){this.#k&&(this.#k=!1,this.emit("terminateWorkers")),this.stop(),this.#t=null,this.#e=0,this.#s=null,this.#E=[],this.#i=[],this.#r=[],this.#d=0,this.#m=0,this.#f=0,this.#T=0,this.#g=0,this.#o=5e5/this.#y,this.#h=[],this.emit("unloaded")}play(){if(!this.#a&&!this.#k){if(0===this.#E.length)throw new Error("No MIDI data loaded.");this.#a=!0,0===this.#n&&(this.#o=5e5/this.#y,this.#h=new Array(this.#e).fill(0)),this.emit("play"),this.#p=performance.now(),this.#c=setInterval(this.#P.bind(this),this.#u)}}pause(){this.#a&&(this.#a=!1,clearInterval(this.#c),this.#c=null,this.#l=this.getCurrentTick(),this.#p=0,this.emit("pause"))}stop(){if(!this.#a&&0===this.#n)return;this.#a=!1,clearInterval(this.#c),this.#c=null;const t=this.#n>0;this.#n=0,this.#l=0,this.#p=0,this.#o=5e5/this.#y,t&&this.emit("stop")}seek(t){if(this.#k||0===this.#E.length)return;if(t=Math.min(Math.max(0,t),this.#f),Number.isNaN(t))return;const e=this.#a;if(e&&this.pause(),this.#r.length>0){let e=0,s=this.#r.length-1,i=-1;for(;e<=s;){const r=Math.floor(e+(s-e)/2);this.#r[r].tick<=t?(i=r,e=r+1):s=r-1}this.#o=(-1!==i?this.#r[i].uspq:5e5)/this.#y}for(let e=0;e<this.#e;++e)this.#h[e]=this.#L(e,t);this.#n=t,this.#l=t,this.emit("seek",{tick:t}),e&&this.play()}#L(t,e){const s=this.#E[t];if(0===s.eventCount)return 0;let i=0,r=s.eventCount;for(;i<r;){const t=Math.floor(i+(r-i)/2);s.view.getUint32(8*t)<e?i=t+1:r=t}return i}#P(){if(!this.#a)return clearInterval(this.#c),void(this.#c=null);if(this.#n=this.getCurrentTick(),this.#E.every((t,e)=>this.#h[e]>=t.eventCount)||this.#n>this.#f)return this.stop(),void this.emit("endOfFile");for(let t=0;t<this.#E.length;++t){const e=this.#E[t];if(!e)continue;let s=this.#h[t];for(;s<e.eventCount&&e.view.getUint32(8*s)<=this.#n;){const i=8*s,r=e.view.getUint32(i),a=e.view.getUint32(i+4),n=a>>24,o={tick:this.#n};switch(n){case EVENT_CODE.NOTE_ON:case EVENT_CODE.NOTE_OFF:o.type=n,o.channel=a>>16&255,o.note=a>>8&255,o.velocity=255&a;break;case EVENT_CODE.CONTROL_CHANGE:o.type=11,o.channel=a>>16&255,o.ccNum=a>>8&255,o.ccValue=255&a;break;case EVENT_CODE.SET_TEMPO:o.type=255,o.metaType=81,o.uspq=16777215&a;break;case EVENT_CODE.END_OF_TRACK:o.type=255,o.metaType=47;break;default:throw new Error(`Unknown event type ${n}! Worker returned corrupted buffer?`)}if(this.emit("midiEvent",o),n===EVENT_CODE.SET_TEMPO){const t=this.#o*this.#y,e=(this.#n-r)*(t/1e3)/this.#s;this.#l=r,this.#p=performance.now()-e,this.#o=o.uspq/this.#y}++this.#h[t],s=this.#h[t]}}}#w(){this.#r.sort((t,e)=>t.tick-e.tick);const t=[{tick:0,uspq:5e5}];for(const e of this.#r){const s=t[t.length-1];e.tick===s.tick?s.uspq=e.uspq:t.push(e)}let e=0;for(let s=0;s<t.length;++s){const i=t[s].uspq,r=(s<t.length-1?t[s+1].tick:this.#f)-t[s].tick;r>0&&(e+=r*(i/1e3)/this.#s)}this.#T=e/1e3}getCurrentTick(){if(!this.#p)return this.#l;const t=this.#s/(this.#o/1e3),e=performance.now()-this.#p;return Math.round(t*e)+this.#l}get isLoading(){return this.#k}get isPlaying(){return this.#a}get trackCount(){return this.#e}get tracksParsed(){return this.#d}get songTime(){return this.#T}get ppqn(){return this.#s}get currentTempo(){return 6e7/this.#o}get totalEvents(){return this.#m}get totalTicks(){return this.#f}get tracks(){return this.#E}get playbackSpeed(){return this.#y}set playbackSpeed(t){if(t=+t,Number.isNaN(t))throw new Error("Playback speed must be a valid number!");if(t<=0)throw new Error("Playback speed must be a positive number!");const e=this.#y;if(t!==e&&(this.#y=t,this.isPlaying)){const s=this.getCurrentTick();this.#o=this.#o*e/t,this.#l=s,this.#p=performance.now()}}}"undefined"!=typeof module?module.exports=Player:this.Player=Player;